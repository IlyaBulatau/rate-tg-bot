version: '3.7'
services:

  web:
    build:
      context: web
    container_name: web
    hostname: web
    restart: unless-stopped
    env_file:
      - .env
    entrypoint: uvicorn main:app --port=5555 --host=0.0.0.0 --proxy-headers --forwarded-allow-ips=*
    ports:
      - "5555:5555"
    volumes:
      - static:/home/code/static/

  bot:
    build:
      context: bot
    container_name: bot
    restart: unless-stopped
    hostname: bot
    entrypoint: python3 -u main.py
    env_file:
      - .env
    ports:
      - "8080:${BOT_PORT}"

  api:
    build:
      context: api
    container_name: api
    restart: unless-stopped
    hostname: api
    entrypoint: bash -c "python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy

  parser:
    build:
      context: parser
    container_name: parser
    restart: unless-stopped
    entrypoint: python3 -u main.py
    env_file:
      - .env
    depends_on:
      broker:
        condition: service_healthy

  proxy:
    build:
      context: deploy/nginx
    container_name: proxy
    volumes:
      - ./deploy/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./deploy/certbot/conf:/etc/letsencrypt
      - ./deploy/certbot/www:/var/www/certbot
      - static:/var/static
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - bot

  certbot:
    container_name: certbot
    image: certbot/certbot:v1.17.0
    restart: unless-stopped
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./deploy/certbot/conf:/etc/letsencrypt
      - ./deploy/certbot/www:/var/www/certbot

  broker:
    image: rabbitmq:management
    container_name: broker
    environment:
      - RABBITMQ_DEFAULT_USER=${BROKER_USER}
      - RABBITMQ_DEFAULT_PASS=${BROKER_PASSWORD}
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    ports:
      - "5673:5672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 2

  db:
    image: postgres:14-alpine
    container_name: db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  rabbit_data:
  static: